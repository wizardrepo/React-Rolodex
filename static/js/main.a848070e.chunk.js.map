{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.js","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","props","react_default","a","createElement","className","alt","src","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","Component","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFileChange","e","setState","SearchField","target","value","state","_this3","fetch","then","resp","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OCI3BC,qBAAO,SAACC,GAAD,OAElBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAK,wBAA0BN,EAAMO,QAAQC,GAAK,0BAErEP,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQE,MACnBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQC,IACnBP,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,UCNRC,SAAW,SAACX,GAAD,OAGxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,IAEMJ,EAAMY,SAASC,IAAI,SAAAN,GAAO,OAAKN,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,MAFrE,OCJaS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OAEzBlB,EAAAC,EAAAC,cAAA,SAAOC,UAAY,SAASgB,KAAK,SAASF,YAAeA,EAAaG,SAAYF,MC0FnEG,SAjFKC,wBA2BlB,SAAAD,IACA,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACEE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAgBFI,aAAe,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAhBtCZ,EAAKa,MACL,CACEzB,SAAU,GACVsB,YAAa,IALjBV,mFAsBA,IAAAc,EAAAX,KACEY,MAtDQ,8CAuDPC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACrB,SAAU+B,uCAG1C,IAAAC,EACoCjB,KAAKU,MAA/BzB,EADVgC,EACUhC,SAAUsB,EADpBU,EACoBV,YACZW,EAAmBjC,EAASkC,OAAO,SAAAvC,GAAO,OAAIA,EAAQE,KAAKsC,cAAcC,SAASd,EAAYa,iBAGnG,OACD9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,MAAIK,GAAG,SAAP,oBACAP,EAAAC,EAAAC,cAAC8C,EAAD,CACA/B,YAAc,gBACdC,aAAcQ,KAAKI,eAEnB9B,EAAAC,EAAAC,cAAC+C,EAAD,CAAUtC,SAAUiC,YA3CNtB,cC5BE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.a848070e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './card.styles.css'\n\n\nexport const Card = (props) => (\n\n\t <div className=\"card-container\">\n\t <img alt='monster' src={\"https://robohash.org/\" + props.monster.id + \"set=set2&size=120x120\"}/>\n\t\n\t <h1>{props.monster.name}</h1>\n\t <h2>{props.monster.id}</h2>\n\t <h2>{props.monster.email}</h2>\n\t \n\t</div>\n\t);\n\n\n\n","import React from 'react'\nimport { Card } from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = (props) => (\n\n\n<div className=\"card-list\"> {\n      \n      props.monsters.map(monster => (<Card key={monster.id} monster={monster}></Card>))\n    } </div>\n\n);","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) =>\n(\n<input className = \"search\" type=\"search\" placeholder = {placeholder} onChange = {handleChange}/>\n);","import React, { Component } from 'react';\nimport logo from './logo.svg';\n\n\n\n\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nimport {BackGround} from './components/background/background.component'\n\n\nvar users = \"https://jsonplaceholder.typicode.com/users\";\n\n\nclass Board extends Component\n{\n  constructor() \n  {\n    super();\n    this.state = \n    {\n        squares: Array(9).fill('X')\n    };\n\n  }\n\n  render()\n  {\n    return (\n      <div className = \"Board\">\n      {\n      this.state.squares.map(squares => <h1> {squares.value} </h1>)\n      }\n      </div>\n    );\n  }\n\n}\n\nclass App extends Component\n{\n  constructor() \n  {\n    super();\n    this.state = \n    {\n      monsters: [],\n      SearchField: ''\n    };\n    /* you use the method below to bind a function to the this.state of the App\n    by issuing this in the constructor\n    \n    Alternatively, functions can be re-written like so:\n    from traditional: func(e) {} to func = (e) => {} as the latter, react style func\n    carries state forward. */\n\n   // this.onFileChange = this.onFileChange.bind(this);\n  }\n\n  onFileChange = (e) => {\n    this.setState({SearchField : e.target.value})\n  }\n  \n  componentDidMount()\n  {\n    fetch(users)\n    .then(resp => resp.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  render()\n  {\n    const { monsters, SearchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(SearchField.toLowerCase()))\n   // const monsters = this.state.monsters;\n   // const SearchField = this.state.SearchField;\n     return (\n    <div className=\"App\">\n    <h1 id=\"title\">Monsters Rolodex</h1>\n    <SearchBox\n    placeholder = \"find monsters\" \n    handleChange={this.onFileChange}\n    />\n    <CardList monsters={filteredMonsters}/>\n    \n  \n    \n\n\n    </div>\n  );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}